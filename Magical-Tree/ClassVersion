background class

tree class

leaves class

ground class



class background {
  bg;
  diam;
  
  constructor() {
    this.bg = bg;
    this.diam = diam;
  }

  draw() {
    this.bg = createGraphics(width, height);
    this.bg.beginShape();
    this.bg.noStroke();
    for (this.diam = 1.5 * width; this.diam > 0.5 * width; this.diam -= 20) {
        bg.fill(map(this.diam, 0.5 * width, 1.5 * width, 255, 210));
        bg.ellipse(width / 2, height / 2, this.diam, this.diam);
    }
    this.bg.endShape();
  
  }

}

class genTree {
  n;
  diam;
  drawLeftBranch;
  drawRightBranch;
  i;
  
  constructor(x, y, bSize, theta, bLength, pos) {
    n.this = n;
    diam.this = diam;
    drawLeftBranch.this = drawLeftBranch;
    drawRightBranch.this = drawRightBranch;
    i.this = i;
    this.leafs = [];
    this.tree = createGraphics(width, height);
    
    x.this= x;
    y.this = y;
    bSize.this = bSize;
    theta.this = theta;
    bLength.this = this;
    pos.this = pos;
  
  }
  
  branch() {
    this.n += 0.01;
    this.diam = lerp(this.bSize, 0.7 * this.bSize, this.pos / this.bLength);
    this.diam *= map(noise(this.n), 0, 1, 0.4, 1.6);

    tree.ellipse(this.x, this.y, this.diam, this.diam);
    if (this.bSize > 0.6) {
        if (this.pos < this.bLength) {
            this.x += cos(this.theta + random(-PI / 10, PI / 10));
            this.y += sin(this.theta + random(-PI / 10, PI / 10));
            branch(this.x, this.y, this.bSize, this.theta, this.bLength, this.pos + 1);
        } else {
            this.leafs.push(createVector(x, y));
            this.drawLeftBranch = random(1) > 0.1;
            this.drawRightBranch = random(1) > 0.1;
            if (this.drawLeftBranch) branch(this.x, this.y, random(0.5, 0.7) * this.bSize, this.theta - random(PI / 15, PI / 5), random(0.6, 0.8) * this.bLength, 0);
            if (this.drawRightBranch) branch(this.x, this.y, random(0.5, 0.7) * this.bSize, this.theta + random(PI / 15, PI / 5), random(0.6, 0.8) * this.bLength, 0);

            if (!this.drawLeftBranch && !this.drawRightBranch) {
                this.tree.push()
                this.tree.translate(this.x, this.y);
                this.tree.rotate(this.theta);
                thistree.quad(0, -this.diam / 2, 2 * this.diam, -this.diam / 6, 2 * this.diam, this.diam / 6, 0, this.diam / 2);
                this.tree.pop();
            }
        }
    }
  }
  
  
  draw() {
    this.tree.beginShape();
    this.tree.noStroke();
    this.tree.background(0, 0);
    for (this.i = 0; this.i < 3; this.i++) {
        this.tree.fill(map(this.i, 0, 2, 60, 20));
        this.branch(width / 2, height, 70, -HALF_PI, 150, 0);
    }
    this.tree.endShape();
  }
}

class ground() {
  i;
  constructor(n) {
    this.i = i;
    this.n = n;
  }
  draw() {
    fill(20);
    beginShape();
    vertex(0, height);
    for (this.i = 0; this.i <= width; this.i += 50) {
        vertex(this.i, map(noise(this.n), 0, 1, height - 30, height));
        this.n += 0.1;
    }
    vertex(width, height);
    endShape();
  
  }

}


  

